box: combient/java-mvn  
build:
  steps:
    # Build Inventory REST application
    - script:
        name: Maven install
        code: mvn install

push-dockerhub:
  steps:
    # Push to public docker repo
    - internal/docker-push:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD
        tag: latest
        repository: $DOCKERHUB_REPOSITORY
        registry: https://index.docker.io/v1/
        cmd: java -jar  /pipeline/source/target/loan-0.1.0.war
push:
  steps:
    # Push to public docker repo Container Registry (CR)
    - internal/docker-push:
        tag: latest
        repository: $CR_REPOSITORY
        cmd: java -jar  /pipeline/source/target/loan-0.1.0.war

inject-secret:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - kubectl:
        name: delete secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret wrelease; echo delete registry secret
    - kubectl:
        name: create secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=$DOCKER_REGISTRY --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL; echo create registry secret

deploy-to-cluster:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete namespace $NAMESPACE --ignore-not-found=true
    - script:
        name: wait to delete namespace
        code: sleep 30
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create namespace $NAMESPACE
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete deployment rest-creditscore --ignore-not-found=true --namespace=$NAMESPACE
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/creditscore-deployment.yaml --namespace=$NAMESPACE
    - kubectl:
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/ingress.yaml --namespace=$NAMESPACE
testapp:
  steps:
    - script:
        name: Run and Test microservice
        code: | 
              java -jar  /pipeline/source/target/loan-0.1.0.war &
              sleep 10
              CREDITSCORE_URL=http://localhost:8080/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi
restart:
  steps:
    # Restart Docker on OCCS using webhook
    - script:
        name: curl POST
        code: curl -k -X POST $DEPLOYMENT_WEBHOOK